#!/bin/bash

## this script requires flexbar... if not installed you can find it in https://github.com/seqan/flexbar
## This script was originally generated by 
#----------------------------------
#Sotirios Vasileiadis (Dr Ing)
#MSCA IF Fellow
#Group of Plant and Envir. Biotech.
#Dept. Biochemistry & Biotechnology
#University of Thessaly
#Biopolis 41500,
#Larissa,
#Greece
#email accounts: sovasileiadis@uth.gr; vasiliad@gmail.com
#group site: http://plantenvlab.bio.uth.gr
#project site: http://emigrate.bio.uth.gr
#phone: +30 2410 565232


## keep a log of the script execution and time it... for the complete command set for this
## find the ") 2>&1 | tee ${1}/RunLog.txt" in the script end 
 
touch ${1}RunLog.txt
(time (

## check if the passed arguments are different than 4 and exit showing the usage if not 
if [ "$#" -ne 5 ]; then
	echo " "
    echo "ERROR: not enough arguments read USAGE carefully!!!"
	echo " "
	echo "USAGE (no spaces in file names and only underscores, only dashes and fullstop"
	echo "punctuation characters are allowed):"
	echo "sh DemuxOwnBCsys.sh outdir fwdreads_file rvrsereads_file mapping_file n_cores_flexbar"
	echo " "
	echo " "
	echo "The mapping file should be a TAB delimited text table"
	echo "containing the barcode sequence (first column) and the"
	echo "PCR product name. E.g.:"
	echo "Bac_MBR001	TTCTTCTTCGTGTG"
	echo "Bac_MBR002	TTCTTCAAGGTGTG"
	echo "Bac_MBR003	TTCTTGTCAGTGTG"
	echo "...	..."
	echo " "
	echo "CRITICAL!!!"
	echo "If you are multiplexing different 1st step amplification"
	echo "primers as well then extend your barcode sequences to"
	echo "include a portion of these to avoid picking the same"
	echo "sequences multiple times in cases of common barcodes"
	echo "at different primers."
	echo " "
	echo " "
    exit 0
fi

## Check if the save directory exists
if [ ! -d ${1} ]; then
	mkdir ${1}
else
	echo "the save directory exists!!! Please change requested name or remove"
	exit 0
fi

## check if the input files exist and exit with an error message if not
FORREADS=${2}
if [[ -e $FORREADS ]]; then
    echo "found $FORREADS"
else
    echo "cannot find forward reads file, please check"
    exit 1
fi

REVREADS=${3}
if [[ -e $REVREADS ]]; then
    echo "found $REVREADS"
else
    echo "cannot find reverse reads, please check"
    exit 1
fi

MAPPING=${4}
if [[ -e $MAPPING ]]; then
    echo "found $MAPPING"
else
    echo "cannot find barcode mapping file, please check"
    exit 1
fi


## proceed with the analysis

cd ${1}

## check the sequence file formats and uncompress them if compressed
if [ ${2: -9} == ".fastq.gz" ]; then
	zcat ${2} > myinput1.fastq
	echo "the forward fastq reads file seems to be compressed with gzip"

elif [ ${2: -6} == ".fastq" ]; then
	cat ${2} > myinput1.fastq
	echo "the forward reads file seems to be an uncompressed fastq"

else
	echo "cannot define forward reads file format... please check"
    exit 1
fi

if [ ${3: -9} == ".fastq.gz" ]; then
	zcat ${3} > myinput2.fastq
	echo "the reverse fastq reads file seems to be compressed with gzip"

elif [ ${3: -6} == ".fastq" ]; then
	cat ${3} > myinput2.fastq
	echo "the reverse reads file seems to be an uncompressed fastq"

else
	echo "cannot define reverse reads file format... please check"
    exit 1
fi

echo " "
echo "$(date) : Starting with demultiplexing."
echo " "


## prepare the bcfile

cat ../${4} > mymasterbcfile
perl -pi -e "s/^/>/g" mymasterbcfile
perl -pi -e "s/\t/\n/g" mymasterbcfile

# split the bcfile file into 300 line portions due to flexbar run issues 
# (only in the ubuntu happens) and analyze each one individually
# this also complicated things with the input and unmatched files so I had to
# expand the fastq files and name them as myinput
split -l 600 mymasterbcfile "my_bcfile_portion"

#mkdir formatch
#mkdir revmatch

## start with the fastq sequence splitting task
for mybcfile in my_bcfile_portion*
	do

	mv ${mybcfile} ${mybcfile}.fasta
 
	## fish the pairs with the barcodes in the forward reads
	
	flexbar -r myinput1.fastq -p myinput2.fastq -t formatch -n ${5} -qf i1.8 -be LTAIL -bt 0 --max-uncalled 200 -b ${mybcfile}.fasta --barcode-unassigned
	  #-t formatch/ -bk -bu -n ${5} -f i1.8 -be LEFT_TAIL -bt 0 \
	echo " "
	echo "$(date) : Finished processing the pairs with the forward read containing the barcodes"
	echo " "
	
	
	## fish the pairs with the barcodes in the reverse reads
	
	flexbar -r formatch_barcode_unassigned_2.fastq -p formatch_barcode_unassigned_1.fastq -t revmatch -n ${5} -qf i1.8 -be LTAIL -bt 0 --max-uncalled 200 -b ${mybcfile}.fasta --barcode-unassigned
	mv revmatch_barcode_unassigned_1.fastq myinput2.fastq
	mv revmatch_barcode_unassigned_2.fastq myinput1.fastq

	done

mv myinput2.fastq unassigned_R2.fastq
mv myinput1.fastq unassigned_R1.fastq

echo " "
echo "$(date) : Finished processing the pairs with the reverse read containing the barcodes"
echo " "


## prepare the NCBI-ready files

echo " "
echo "$(date) : Finished demultiplexing... Preparing the NCBI submission-ready files"
echo " "


mkdir NCBI

cut -f1 ../${4} > tmp_bclist

touch ${1}_lib_stats.txt

for i in `cat tmp_bclist`
	do
	cat formatch_barcode_${i}_1.fastq revmatch_barcode_${i}_2.fastq > NCBI/${i}_R1.fastq
	my_seq_num=`wc -l NCBI/${i}_R1.fastq | perl -pe "s/^ +//g" | perl -pe "s/ .+//g"`
	printf "${i}\t$(( ${my_seq_num} / 4 ))\n" >> ${1}_lib_stats.txt
	gzip NCBI/${i}_R1.fastq
	cat formatch_barcode_${i}_2.fastq revmatch_barcode_${i}_1.fastq > NCBI/${i}_R2.fastq
	gzip NCBI/${i}_R2.fastq
	done

# get the unassigned stats
my_seq_num=`wc -l unassigned_R1.fastq | perl -pe "s/^ +//g" | perl -pe "s/ .+//g"`
printf "unassigned\t$(( ${my_seq_num} / 4 ))\n" >> ${1}_lib_stats.txt


echo " "
echo "$(date) : Done with the NCBI submission-ready files... compressing unmatched."
echo " "


## compress the unmatched sequences
gzip unassigned_R1.fastq
gzip unassigned_R2.fastq

## prepare the analysis-ready files... 
## Attention!!!: In this case you need the barcodes in the forward read always and 
## you need only two files per library (one forward and one reverse) 

echo " "
echo "$(date) : Preparing the analysis ready files (containning the indexed primer in the forward reads)"
echo " "

mkdir analysis_ready

for i in `cat tmp_bclist`
	do
	cat formatch_barcode_${i}_1.fastq revmatch_barcode_${i}_1.fastq >> analysis_ready/${i}_lib_R1.fastq
	cat formatch_barcode_${i}_2.fastq revmatch_barcode_${i}_2.fastq >> analysis_ready/${i}_lib_R2.fastq
	done
	gzip analysis_ready/${i}_lib_R1.fastq
	gzip analysis_ready/${i}_lib_R2.fastq

echo " "
echo "$(date) : Done with all tasks!!!"
echo " "
echo " "
echo "$(date) : Total runtime stats"

## remove the temporary files
rm -rf formatch_* revmatch_* my* tmp*

cd ..

## the following line completes the log keeping process
)) 2>&1 | tee ${1}RunLog.txt
if [ "$#" -ne 4 ]; then
	exit 0
else
mv ${1}_RunLog.txt ${1}/${1}RunLog.txt
fi
